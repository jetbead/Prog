#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

//1次元離散高速ウェーブレット変換・逆変換
class FWT {
  unsigned int L; //1次元信号の長さ
  unsigned int K; //数列p_kの長さ

public:
  
  FWT(int L_,
      int K_){
    L = L_;
    K = K_;
  }

  void fwt1d(const vector<double>& s0,
             const vector<double>& p,
             const vector<double>& q,
             vector<double>& s1,
             vector<double>& w1){

    for(size_t k=0; k<L/2; k++){
      s1[k] = 0.0;
      w1[k] = 0.0;

      for(size_t n=0; n<K; n++){
        size_t idx = (n+2*k)%L;
        s1[k] += p[n] * s0[idx];
        w1[k] += q[n] * s0[idx];
      }
    }

  }

  void ifwt1d(const vector<double>& s1,
              const vector<double>& w1,
              const vector<double>& p,
              const vector<double>& q,
              vector<double>& s0){

    unsigned int ofs = max(static_cast<unsigned int>(1024), L/2);

    for(size_t n=0; n<L/2; n++){
      s0[2*n+1] = 0.0;
      s0[2*n] = 0.0;
      
      for(size_t k=0; k<K/2; k++){
        size_t idx = (n-k+ofs)%(L/2);
        s0[2*n+1] += p[2*k+1] * s1[idx] + q[2*k+1] * w1[idx];
        s0[2*n] += p[2*k] * s1[idx] + q[2*k] * w1[idx];
      }
    }
  }
};


int main(){

  int L = 64;
  int K = 4;

  vector<double> s0(L);
  vector<double> s0r(L);
  vector<double> s1(L/2);
  vector<double> w1(L/2);

  vector<double> p(K); //ドベシィの数列
  //K=4
  p[0] = 0.482962913145;
  p[1] = 0.836516303738;
  p[2] = 0.224143868042;
  p[3] = -0.129409522551;
  //*/
  /*//K=6
  p[0] = 0.33267055295008;
  p[1] = 0.80689150931109;
  p[2] = 0.45987750211849;
  p[3] = -0.13501102001025;
  p[4] = -0.08544127388203;
  p[5] = 0.03522629188571;
  //*/
  /*//K=8
  p[0] = 0.23037781330889;
  p[1] = 0.71484657055291;
  p[2] = 0.63088076792986;
  p[3] = -0.02798376941686;
  p[4] = -0.18703481171909;
  p[5] = 0.03084138183556;
  p[6] = 0.03288301166689;
  p[7] = -0.01059740178507;
  //*/
  /*//K=12
  p[0] = 0.11154074335011;
  p[1] = 0.49462389039845;
  p[2] = 0.75113390802110;
  p[3] = 0.31525035170920;
  p[4] = -0.22626469396544;
  p[5] = -0.12976686756727;
  p[6] = 0.09750160558732;
  p[7] = 0.02752286553031;
  p[8] = -0.03158203931749;
  p[9] = 0.00055384220116;
  p[10] = 0.00477725751095;
  p[11] = -0.00107730108531;
  //*/
  /*//K=16
  p[0] = 0.05441584224311;
  p[1] = 0.31287159091432;
  p[2] = 0.67563073629732;
  p[3] = 0.58535468365422;
  p[4] = -0.01582910525638;
  p[5] = -0.28401554296158;
  p[6] = 0.00047248457391;
  p[7] = 0.12874742662049;
  p[8] = -0.01736930100181;
  p[9] = -0.04408825393080;
  p[10] = 0.01398102791740;
  p[11] = 0.00874609404741;
  p[12] = -0.00487035299345;
  p[13] = -0.00039174037338;
  p[14] = 0.00067544940645;
  p[15] = -0.00011747678412;
  //*/
  /*//K=20
  p[0] = 0.02667005790055;
  p[1] = 0.18817680007763;
  p[2] = 0.52720118893158;
  p[3] = 0.68845903945344;
  p[4] = 0.28117234366057;
  p[5] = -0.24984642432716;
  p[6] = -0.19594627437729;
  p[7] = 0.12736934033575;
  p[8] = 0.09305736460355;
  p[9] = -0.07139414716635;
  p[10] = -0.02945753682184;
  p[11] = 0.03321267405936;
  p[12] = 0.00360655356699;
  p[13] = -0.01073317548330;
  p[14] = 0.00139535174707;
  p[15] = 0.00199240529519;
  p[16] = -0.00068585669496;
  p[17] = -0.00011646685513;
  p[18] = 0.00009358867032;
  p[19] = -0.00001326420289;
  //*/
  vector<double> q(K);
  //p_kからq_kを生成
  for(int i=0; i<K; i++){
    q[i] = pow(-1.0, static_cast<double>(i)) * p[K-i-1];
  }


  //入力信号s0の初期値設定
  for(int i=0; i<16; i++){
    s0[i] = ((i+1)*(i+1)) / 256.0;
  }
  for(int i=16; i<32; i++){
    s0[i] = 0.2;
  }
  for(int i=32; i<48; i++){
    s0[i] = ((47-i)*(47-i))/256.0 - 0.5;
  }


  //入力信号
  cout << "入力信号" << endl;
  for(int i=0; i<L; i++){
    cout << s0[i] << " ";
  }
  cout << endl;

  FWT fwt(L, K);

  fwt.fwt1d(s0, p, q, s1, w1);
  fwt.ifwt1d(s1, w1, p, q, s0r);

  //再構成信号
  cout << "再構成信号" << endl;
  for(int i=0; i<L; i++){
    cout << s0r[i] << " ";
  }
  cout << endl;

  return 0;
}
